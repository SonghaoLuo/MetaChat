__init__.py:1:25: F401 `._computeLR.LRC_unfiltered` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from ._computeLR import LRC_unfiltered
  |                         ^^^^^^^^^^^^^^ F401
2 | from ._computeLR import LRC_cluster
3 | from ._computeLR import LRC_filtered
  |
  = help: Use an explicit re-export: `LRC_unfiltered as LRC_unfiltered`

__init__.py:2:25: F401 `._computeLR.LRC_cluster` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from ._computeLR import LRC_unfiltered
2 | from ._computeLR import LRC_cluster
  |                         ^^^^^^^^^^^ F401
3 | from ._computeLR import LRC_filtered
4 | from ._computeLR import compute_costDistance
  |
  = help: Use an explicit re-export: `LRC_cluster as LRC_cluster`

__init__.py:3:25: F401 `._computeLR.LRC_filtered` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from ._computeLR import LRC_unfiltered
2 | from ._computeLR import LRC_cluster
3 | from ._computeLR import LRC_filtered
  |                         ^^^^^^^^^^^^ F401
4 | from ._computeLR import compute_costDistance
5 | from ._computeLR import build_visible_graph
  |
  = help: Use an explicit re-export: `LRC_filtered as LRC_filtered`

__init__.py:4:25: F401 `._computeLR.compute_costDistance` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
2 | from ._computeLR import LRC_cluster
3 | from ._computeLR import LRC_filtered
4 | from ._computeLR import compute_costDistance
  |                         ^^^^^^^^^^^^^^^^^^^^ F401
5 | from ._computeLR import build_visible_graph
6 | from ._computeLR import retain_knn_graph
  |
  = help: Use an explicit re-export: `compute_costDistance as compute_costDistance`

__init__.py:5:25: F401 `._computeLR.build_visible_graph` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
3 | from ._computeLR import LRC_filtered
4 | from ._computeLR import compute_costDistance
5 | from ._computeLR import build_visible_graph
  |                         ^^^^^^^^^^^^^^^^^^^ F401
6 | from ._computeLR import retain_knn_graph
7 | from ._computeLR import modify_graph_byLRC
  |
  = help: Use an explicit re-export: `build_visible_graph as build_visible_graph`

__init__.py:6:25: F401 `._computeLR.retain_knn_graph` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
4 | from ._computeLR import compute_costDistance
5 | from ._computeLR import build_visible_graph
6 | from ._computeLR import retain_knn_graph
  |                         ^^^^^^^^^^^^^^^^ F401
7 | from ._computeLR import modify_graph_byLRC
8 | from ._MetaChatDB import MetaChatDB
  |
  = help: Use an explicit re-export: `retain_knn_graph as retain_knn_graph`

__init__.py:7:25: F401 `._computeLR.modify_graph_byLRC` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
5 | from ._computeLR import build_visible_graph
6 | from ._computeLR import retain_knn_graph
7 | from ._computeLR import modify_graph_byLRC
  |                         ^^^^^^^^^^^^^^^^^^ F401
8 | from ._MetaChatDB import MetaChatDB
  |
  = help: Use an explicit re-export: `modify_graph_byLRC as modify_graph_byLRC`

__init__.py:8:26: F401 `._MetaChatDB.MetaChatDB` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
6 | from ._computeLR import retain_knn_graph
7 | from ._computeLR import modify_graph_byLRC
8 | from ._MetaChatDB import MetaChatDB
  |                          ^^^^^^^^^^ F401
  |
  = help: Use an explicit re-export: `MetaChatDB as MetaChatDB`

_computeLR.py:100:12: E713 [*] Test for membership should be `not in`
    |
 98 |     assert LRC_name is not None, "Please provide an LRC name."
 99 |     key = 'LRC_' + LRC_name + '_unfiltered'
100 |     if not key in adata.obs.keys():
    |            ^^^^^^^^^^^^^^^^^^^^^^^ E713
101 |         raise KeyError("Please run the mc.pp.LRC_unfiltered function first")
    |
    = help: Convert to `not in`

_computeLR.py:178:12: E713 [*] Test for membership should be `not in`
    |
176 |     assert LRC_cluster is not None, "Please provide LRC_cluster."
177 |     key = 'LRC_' + LRC_name + '_unfiltered'
178 |     if not key in adata.obs.keys():
    |            ^^^^^^^^^^^^^^^^^^^^^^^ E713
179 |         raise KeyError("Please run the 'mc.pp.LRC_unfiltered' function and 'mc.pp.LRC_cluster' function first")
    |
    = help: Convert to `not in`

_computeLR.py:353:12: E713 [*] Test for membership should be `not in`
    |
351 |     """
352 |     
353 |     if not "barrier" in adata.uns.keys():
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E713
354 |         raise KeyError("Missing 'graph_visible' in adata.uns, please run the 'mc.pp.build_visible_graph' function first")
    |
    = help: Convert to `not in`

_computeLR.py:509:8: E712 Avoid equality comparisons to `True`; use `if barrier:` for truth checks
    |
507 |         print("You didn't input LRC_type, so long-range communication will not be consider in subsequence analysis")
508 |     
509 |     if barrier == True and not "barrier" in adata.obs.keys():
    |        ^^^^^^^^^^^^^^^ E712
510 |         raise KeyError("Please check the barrier information are defined in the adata.obs['barrier']")
    |
    = help: Replace with `barrier`

_computeLR.py:509:32: E713 [*] Test for membership should be `not in`
    |
507 |         print("You didn't input LRC_type, so long-range communication will not be consider in subsequence analysis")
508 |     
509 |     if barrier == True and not "barrier" in adata.obs.keys():
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E713
510 |         raise KeyError("Please check the barrier information are defined in the adata.obs['barrier']")
    |
    = help: Convert to `not in`

_computeLR.py:513:12: E713 [*] Test for membership should be `not in`
    |
512 |     print("Compute spatial cost distance without long-range channel...")
513 |     if not 'spatial_distance' in adata.obsp.keys():
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E713
514 |         if barrier == False:
515 |             dis_mat = distance_matrix(adata.obsm["spatial"], adata.obsm["spatial"])
    |
    = help: Convert to `not in`

_computeLR.py:514:12: E712 Avoid equality comparisons to `False`; use `if not barrier:` for false checks
    |
512 |     print("Compute spatial cost distance without long-range channel...")
513 |     if not 'spatial_distance' in adata.obsp.keys():
514 |         if barrier == False:
    |            ^^^^^^^^^^^^^^^^ E712
515 |             dis_mat = distance_matrix(adata.obsm["spatial"], adata.obsm["spatial"])
516 |             adata.obsp['spatial_distance_LRC_No'] = dis_mat
    |
    = help: Replace with `not barrier`

_computeLR.py:517:14: E712 Avoid equality comparisons to `True`; use `if barrier:` for truth checks
    |
515 |             dis_mat = distance_matrix(adata.obsm["spatial"], adata.obsm["spatial"])
516 |             adata.obsp['spatial_distance_LRC_No'] = dis_mat
517 |         elif barrier == True:
    |              ^^^^^^^^^^^^^^^ E712
518 |             build_visible_graph(adata = adata,
519 |                                 use_parallel = use_parallel,
    |
    = help: Replace with `barrier`

_computeLR.py:521:42: F821 Undefined name `G_visible`
    |
519 |                                 use_parallel = use_parallel,
520 |                                 n_jobs = n_jobs)
521 |             adata.uns['graph_visible'] = G_visible
    |                                          ^^^^^^^^^ F821
522 |             G_kneighb = retain_knn_graph(G_visible, k=k_neighb)
523 |             adata.uns[f'graph_visible_kneighb_{k_neighb}'] = G_kneighb
    |

_computeLR.py:522:25: F821 Undefined name `retain_knn_graph`
    |
520 |                                 n_jobs = n_jobs)
521 |             adata.uns['graph_visible'] = G_visible
522 |             G_kneighb = retain_knn_graph(G_visible, k=k_neighb)
    |                         ^^^^^^^^^^^^^^^^ F821
523 |             adata.uns[f'graph_visible_kneighb_{k_neighb}'] = G_kneighb
524 |             # Compute the distance matrix with barrier information
    |

_computeLR.py:522:42: F821 Undefined name `G_visible`
    |
520 |                                 n_jobs = n_jobs)
521 |             adata.uns['graph_visible'] = G_visible
522 |             G_kneighb = retain_knn_graph(G_visible, k=k_neighb)
    |                                          ^^^^^^^^^ F821
523 |             adata.uns[f'graph_visible_kneighb_{k_neighb}'] = G_kneighb
524 |             # Compute the distance matrix with barrier information
    |

_computeLR.py:525:13: F821 Undefined name `build_distance_matrix`
    |
523 |             adata.uns[f'graph_visible_kneighb_{k_neighb}'] = G_kneighb
524 |             # Compute the distance matrix with barrier information
525 |             build_distance_matrix(adata = adata, 
    |             ^^^^^^^^^^^^^^^^^^^^^ F821
526 |                                   non_visible_pair = non_visible_pair, 
527 |                                   G_kneighb = G_kneighb, 
    |

_computeLR.py:526:54: F821 Undefined name `non_visible_pair`
    |
524 |             # Compute the distance matrix with barrier information
525 |             build_distance_matrix(adata = adata, 
526 |                                   non_visible_pair = non_visible_pair, 
    |                                                      ^^^^^^^^^^^^^^^^ F821
527 |                                   G_kneighb = G_kneighb, 
528 |                                   use_parallel = use_parallel, 
    |

_computeLR.py:540:20: E713 [*] Test for membership should be `not in`
    |
538 | …     # Check inputs
539 | …     key = 'LRC_' + LRC_element + '_filtered'
540 | …     if not key in adata.obs.keys():
    |              ^^^^^^^^^^^^^^^^^^^^^^^ E713
541 | …         raise KeyError(f"Can't find the adata.obs[{key}], Please run the 'mc.pp.LRC_unfiltered' function, 'mc.pp.LRC_cluster' funct…
    |
    = help: Convert to `not in`

_computeLR.py:599:20: E712 Avoid equality comparisons to `False`; use `if not nx.is_connected(G):` for false checks
    |
597 |                         G.add_edge((x_coord, y_coord), (x_coord_neigh, y_coord_neigh), weight = dis_mat_LR_point[iLR,ineigh])
598 |                 
599 |                 if nx.is_connected(G) == False:
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ E712
600 |                     nx.is_connected(G)
601 |                     components = list(nx.connected_components(G))
    |
    = help: Replace with `not nx.is_connected(G)`

_computeLR.py:652:66: E712 Avoid equality comparisons to `True`; use `if ...:` for truth checks
    |
650 | …
651 | …e long-range case of cluster %s..." %itype)
652 | …pe = spot_close_LR[np.where(np.array([itype in set_obj for set_obj in spot_close_LR_type]) == True)]
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E712
653 | …
654 | …
    |
    = help: Replace comparison

Found 24 errors.
[*] 6 fixable with the `--fix` option (5 hidden fixes can be enabled with the `--unsafe-fixes` option).
